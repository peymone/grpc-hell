# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import demo_pb2 as demo__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in demo_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UsersStub(object):
    """`service` is used to define methods for gRPC services in a fixed format

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetNoneUnary = channel.unary_unary(
            '/unary.Users/GetNoneUnary',
            request_serializer=demo__pb2.GetNone.SerializeToString,
            response_deserializer=demo__pb2.GetNone.FromString,
            _registered_method=True)
        self.GetUserUnary = channel.unary_unary(
            '/unary.Users/GetUserUnary',
            request_serializer=demo__pb2.GetUserRequest.SerializeToString,
            response_deserializer=demo__pb2.GetUserResponse.FromString,
            _registered_method=True)
        self.GetUserClientStream = channel.stream_unary(
            '/unary.Users/GetUserClientStream',
            request_serializer=demo__pb2.GetUserRequest.SerializeToString,
            response_deserializer=demo__pb2.GetUserResponse.FromString,
            _registered_method=True)
        self.GetUserServerStream = channel.unary_stream(
            '/unary.Users/GetUserServerStream',
            request_serializer=demo__pb2.GetUserRequest.SerializeToString,
            response_deserializer=demo__pb2.GetUserResponse.FromString,
            _registered_method=True)
        self.GetUserBidirectional = channel.stream_stream(
            '/unary.Users/GetUserBidirectional',
            request_serializer=demo__pb2.GetUserRequest.SerializeToString,
            response_deserializer=demo__pb2.GetUserResponse.FromString,
            _registered_method=True)


class UsersServicer(object):
    """`service` is used to define methods for gRPC services in a fixed format

    """

    def GetNoneUnary(self, request, context):
        """unary-unary (In a single call, the client can only send request once, 
        and the server can only respond once)

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserUnary(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserClientStream(self, request_iterator, context):
        """stream-unary (In a single call, the client can transfer data to the server several times,
        but the server can only return a response once.)

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserServerStream(self, request, context):
        """unary-stream (In a single call, the client can only transmit data to the server at one time,
        but the server can return the response many times.)

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserBidirectional(self, request_iterator, context):
        """stream-stream (In a single call, both client and server can send and receive data
        to each other multiple times.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsersServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetNoneUnary': grpc.unary_unary_rpc_method_handler(
            servicer.GetNoneUnary,
            request_deserializer=demo__pb2.GetNone.FromString,
            response_serializer=demo__pb2.GetNone.SerializeToString,
        ),
        'GetUserUnary': grpc.unary_unary_rpc_method_handler(
            servicer.GetUserUnary,
            request_deserializer=demo__pb2.GetUserRequest.FromString,
            response_serializer=demo__pb2.GetUserResponse.SerializeToString,
        ),
        'GetUserClientStream': grpc.stream_unary_rpc_method_handler(
            servicer.GetUserClientStream,
            request_deserializer=demo__pb2.GetUserRequest.FromString,
            response_serializer=demo__pb2.GetUserResponse.SerializeToString,
        ),
        'GetUserServerStream': grpc.unary_stream_rpc_method_handler(
            servicer.GetUserServerStream,
            request_deserializer=demo__pb2.GetUserRequest.FromString,
            response_serializer=demo__pb2.GetUserResponse.SerializeToString,
        ),
        'GetUserBidirectional': grpc.stream_stream_rpc_method_handler(
            servicer.GetUserBidirectional,
            request_deserializer=demo__pb2.GetUserRequest.FromString,
            response_serializer=demo__pb2.GetUserResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'unary.Users', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('unary.Users', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.


class Users(object):
    """`service` is used to define methods for gRPC services in a fixed format

    """

    @staticmethod
    def GetNoneUnary(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/unary.Users/GetNoneUnary',
            demo__pb2.GetNone.SerializeToString,
            demo__pb2.GetNone.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserUnary(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/unary.Users/GetUserUnary',
            demo__pb2.GetUserRequest.SerializeToString,
            demo__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserClientStream(request_iterator,
                            target,
                            options=(),
                            channel_credentials=None,
                            call_credentials=None,
                            insecure=False,
                            compression=None,
                            wait_for_ready=None,
                            timeout=None,
                            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/unary.Users/GetUserClientStream',
            demo__pb2.GetUserRequest.SerializeToString,
            demo__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserServerStream(request,
                            target,
                            options=(),
                            channel_credentials=None,
                            call_credentials=None,
                            insecure=False,
                            compression=None,
                            wait_for_ready=None,
                            timeout=None,
                            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/unary.Users/GetUserServerStream',
            demo__pb2.GetUserRequest.SerializeToString,
            demo__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserBidirectional(request_iterator,
                             target,
                             options=(),
                             channel_credentials=None,
                             call_credentials=None,
                             insecure=False,
                             compression=None,
                             wait_for_ready=None,
                             timeout=None,
                             metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/unary.Users/GetUserBidirectional',
            demo__pb2.GetUserRequest.SerializeToString,
            demo__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
